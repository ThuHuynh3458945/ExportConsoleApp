using ExportConsoleApp.Models;
using iText.IO.Font.Constants;
using iText.Kernel.Colors;
using iText.Kernel.Events;
using iText.Kernel.Font;
using iText.Kernel.Geom;
using iText.Kernel.Pdf;
using iText.Kernel.Pdf.Canvas;
using iText.Kernel.Utils;
using iText.Layout;
using iText.Layout.Borders;
using iText.Layout.Element;
using iText.Layout.Properties;
using System.Collections;
using System.Drawing;
using System.Drawing.Printing;
using System.Reflection;

namespace ExportConsoleApp
{
    public class PalletScanFormHeaderEventHandler : IEventHandler
    {
        public void HandleEvent(Event @event)
        {
            PdfDocumentEvent docEvent = (PdfDocumentEvent)@event;
            PdfDocument pdfDoc = docEvent.GetDocument();
            PdfPage page = docEvent.GetPage();

            PdfCanvas canvas = new PdfCanvas(page.NewContentStreamBefore(), page.GetResources(), pdfDoc);

            iText.Kernel.Geom.Rectangle pageSize = page.GetPageSize();

            canvas.BeginText()
                   .SetFontAndSize(PdfFontFactory.CreateFont(StandardFonts.HELVETICA), 12)
                   .MoveText(pageSize.GetRight() - 90, pageSize.GetTop() - 760)
                   .ShowText($"Page {pdfDoc.GetPageNumber(page)} of 1")
                   .EndText();

            canvas.Release();
        }
    }

    public class ExportPalletScanFormService
    {
        public PrintPalletScanFormModel BuildData()
        {
            return new PrintPalletScanFormModel
            {
                PalletId = 73996,
                ClosedBy = "Super Admin",
                ClosedOn = "06/02/2023 08:06(PM)",
                SkidNumber = 12,
                SKidName = "USPS - Domestic First Class - ALL",
                Details = new List<PrintPalletScanFormDetailModel>
                    {
                        new PrintPalletScanFormDetailModel
                        {
                            PartnerName = "Printify",
                            TrackingCodes = "9400136109679888623844,9400136109679889147257,9400136109679889863041,9400136109679890942148,9400136109679891890691,9400136109679891891599,9400136109679892048466,9400136109679892068556,9400136109679892138419,9400136109679892177302,9400136109679893534654,9400136109679893534661,9400136109679893684076,9400136109679893684083,9400136109679893684670,9400136109679893691401,9400136109679893753116,9400136109679893774845,9400136109679893775774,9400136109679893794607,9400136109679893796731,9400136109679893812462,9400136109679893812363,9400136109679893812455,9400136109679893891832,9400136109679893932689,9400136109679893958603,9400136109679893958702,9400136109679893959099,9400136109679893968329,9400136109679893968787,9400136109679893969173,9400136109679893980529,9400136109679894032289,9400136109679894034849,9400136109679894034962,9400136109679894035570,9400136109679894036010,9400136109679894036164,9400136109679894036430,9400136109679894036447,9400136109679894037307,9400136109679894037734,9400136109679894037765,9400136109679894038700,9400136109679894038694,9400136109679894038717,9400136109679894039318,9400136109679894039998,9400136109679894040055,9400136109679894040512,9400136109679894040819,9400136109679894040949,9400136109679894041359,9400136109679894041397,9400136109679894041472,9400136109679894042134,9400136109679894167660,9400136109679894181420,9400136109679894190972,9400136109679894259679,9400136109679894297480,9400136109679894299866,9400136109679894300197,9400136109679894300791,9400136109679894301880,9400136109679894302009,9400136109679894302740,9400136109679894302924,9400136109679894365271,9400136109679894375775,9400136109679894391638,9400136109679894489014,9400136109679894503840,9400136109679894552831,9400136109679894592349,9400136109679894592493,9400136109679894731274,9400136109679894740658,9400136109679894857844,9400136109679894860424,9400136109679896001399,9400136109679896013569,9400136109679896017536,9400136109679896035356,9400136109679896037305,9400136109679896041463,9400136109679896056832,9400136109679896074744,9400136109679896129376,9400136109679896151698,9400136109679896157423,9400136109679896180148,9400136109679896187260,9400136109679896195241,9400136109679896195371,9400136109679896195715,9400136109679896196439,9400136109679896196613,9400136109679896196637,9400136109679896201911,9400136109679896202871,9400136109679896206220,9400136109679896207753,9400136109679896208804,9400136109679896210197,9400136109679896210753,9400136109679896212405,9400136109679896213754,9400136109679896213815,9400136109679896214515,9400136109679896215383,9400136109679896215727,9400136109679896215741,9400136109679896215734,9400136109679896216236,9400136109679896216205,9400136109679896216618,9400136109679896216571,9400136109679896216656,9400136109679896217158,9400136109679896217752,9400136109679896218087,9400136109679896218360,9400136109679896218704,9400136109679896219220,9400136109679896219510,9400136109679896219992,9400136109679896220080,9400136109679896220141,9400136109679896220516,9400136109679896220493,9400136109679896220578,9400136109679896221179,9400136109679896221162,9400136109679896221292,9400136109679896221889,9400136109679896258915,9400136109679896270252,9400136109679896275936,9400136109679896276582,9400136109679896284600,9400136109679896304384,9400136109679896304759,9400136109679896305831,9400136109679896331434,9400136109679896331533,9400136109679896331571,9400136109679896332110,9400136109679896332172,9400136109679896332660,9400136109679896332745,9400136109679896332707,9400136109679896333230,9400136109679896333216,9400136109679896333933,9400136109679896333940,9400136109679896334596,9400136109679896334572,9400136109679896334688,9400136109679896335272,9400136109679896335319,9400136109679896341464,9400136109679896341457,9400136109679896341624,9400136109679896342034,9400136109679896342041,9400136109679896342089,9400136109679896342492,9400136109679896344144,9400136109679896344182,9400136109679896344731,9400136109679896344915,9400136109679896344939,9400136109679896345226,9400136109679896345981,9400136109679896345967,9400136109679896353139,9400136109679896353245,9400136109679896353337,9400136109679896354273,9400136109679896354297,9400136109679896355447,9400136109679896355492,9400136109679896355461,9400136109679896356079,9400136109679896356154,9400136109679896356284,9400136109679896356802,9400136109679896356727,9400136109679896357595,9400136109679896357922,9400136109679896358462,9400136109679896363688,9400136109679896363831,9400136109679896363947,9400136109679896364395,9400136109679896364562,9400136109679896364715,9400136109679896365095,9400136109679896365156,9400136109679896365309,9400136109679896365842,9400136109679896365866,9400136109679896367105,9400136109679896370891,9400136109679896370983,9400136109679896374776,9400136109679896374752,9400136109679896374806,9400136109679896375087,9400136109679896375230,9400136109679896376114,9400136109679896376244,9400136109679896376329,9400136109679896378613,9400136109679896378651,9400136109679896384911,9400136109679896384935,9400136109679896386939,9400136109679896386946,9400136109679896387424,9400136109679896387950,9400136109679896387974,9400136109679896388223,9400136109679896388285,9400136109679896388360,9400136109679896388933,9400136109679896389015,9400136109679896395993,9400136109679896396198,9400136109679896396433,9400136109679896396808,9400136109679896398987,9400136109679896407573,9400136109679896407665,9400136109679896408198,9400136109679896408211,9400136109679896410580,9400136109679896410627,9400136109679896410733,9400136109679896411341,9400136109679896411334,9400136109679896411372,9400136109679896412287,9400136109679896412317,9400136109679896413185,9400136109679896413321,9400136109679896413338,9400136109679896414052,9400136109679896414595,9400136109679896415103,9400136109679896415189,9400136109679896426505,9400136109679896426482,9400136109679896426451,9400136109679896427007,9400136109679896427069,9400136109679896433756,9400136109679896436429,9400136109679896436566,9400136109679896437068,9400136109679896437556,9400136109679896438034,9400136109679896443137,9400136109679896443694,9400136109679896443809,9400136109679896450890,9400136109679896451408,9400136109679896452559,9400136109679896452580,9400136109679896452726,9400136109679896453068,9400136109679896453198,9400136109679896453693,9400136109679896454010,9400136109679896455710,9400136109679896456151,9400136109679896456199,9400136109679896456304,9400136109679896457059,9400136109679896457042,9400136109679896458063,9400136109679896459367,9400136109679896459442,9400136109679896459794,9400136109679896459893,9400136109679896460882,9400136109679896461414,9400136109679896461919,9400136109679896461902,9400136109679896461995,9400136109679896462718,9400136109679896462664,9400136109679896462817,9400136109679896463111,9400136109679896463180,9400136109679896463203,9400136109679896464002,9400136109679896463999,9400136109679896464033,9400136109679896464613,9400136109679896464651,9400136109679896464644,9400136109679896465221,9400136109679896465269,9400136109679896465320,9400136109679896465962,9400136109679896466044,9400136109679896466518,9400136109679896467096,9400136109679896467164,9400136109679896467249,9400136109679896467669,9400136109679896467621,9400136109679896468024,9400136109679896468079,9400136109679896468116,9400136109679896468482,9400136109679896468512,9400136109679896468550,9400136109679896468925,9400136109679896468932,9400136109679896469694,9400136109679896469755,9400136109679896470188,9400136109679896470393,9400136109679896470386,9400136109679896470782,9400136109679896470812,9400136109679896470805,9400136109679896471345,9400136109679896471383,9400136109679896471444,9400136109679896471840,9400136109679896471833,9400136109679896472120,9400136109679896472472,9400136109679896472458,9400136109679896472779,9400136109679896473127,9400136109679896473264,9400136109679896473257,9400136109679896473806,9400136109679896473813,9400136109679896474735,9400136109679896474766,9400136109679896475299,9400136109679896475374,9400136109679896475312,9400136109679896475879,9400136109679896475930,9400136109679896475947,9400136109679896476401,9400136109679896476425,9400136109679896476456,9400136109679896477026,9400136109679896477446,9400136109679896477453,9400136109679896477507,9400136109679896478023,9400136109679896478061,9400136109679896478672,9400136109679896478733,9400136109679896479075,9400136109679896479709,9400136109679896479716,9400136109679896479815,9400136109679896480231,9400136109679896480293,9400136109679896480675,9400136109679896480767,9400136109679896481184,9400136109679896481252,9400136109679896481306,9400136109679896482211,9400136109679896482402,9400136109679896483409,9400136109679896483621,9400136109679896484345,9400136109679896484901,9400136109679896485946,9400136109679896486653,9400136109679896486851,9400136109679896487292,9400136109679896487308,9400136109679896487612,9400136109679896487728,9400136109679896488039,9400136109679896488213,9400136109679896489197,9400136109679896489234,9400136109679896489241,9400136109679896489661,9400136109679896493675,9400136109679896494627,9400136109679896495686,9400136109679896496218,9400136109679896496324,9400136109679896496683,9400136109679896496768,9400136109679896497390,9400136109679896497420,9400136109679896498892,9400136109679896499110,9400136109679896499448,9400136109679896499936,9400136109679896499981,9400136109679896505040,9400136109679896505835,9400136109679896517784,9400136109679896517890,9400136109679896518224,9400136109679896518804,9400136109679896519078,9400136109679896519603,9400136109679896519597,9400136109679896523556,9400136109679896524065,9400136109679896524652,9400136109679896526823,9400136109679896530417,9400136109679896530509,9400136109679896530769,9400136109679896531230,9400136109679896531384,9400136109679896535078,9400136109679896535214,9400136109679896535320,9400136109679896535900,9400136109679896535894,9400136109679896535979,9400136109679896536792,9400136109679896542823,9400136109679896543301,9400136109679896544322,9400136109679896544407,9400136109679896544438,9400136109679896545299,9400136109679896545817,9400136109679896554727,9400136109679896558886,9400136109679896563903,9400136109679896573742,9400136109679896573827,9400136109679896575234,9400136109679896579584,9400136109679896581334,9400136109679896581822,9400136109679896587329,9400136109679896588234,9400136109679896588609,9400136109679896593665,9400136109679896593658,9400136109679896597120,9400136109679896597359,9400136109679896601087,9400136109679896601216,9400136109679896601476,9400136109679896607768,9400136109679896615299,9400136109679896618573,9400136109679896621818,9400136109679896624369,9400136109679896626318,9400136109679896626486,9400136109679896626929,9400136109679896626981,9400136109679896627186,9400136109679896627377,9400136109679896627414,9400136109679896627452,9400136109679896637949,9400136109679896641359,9400136109679896642097,9400136109679896642240,9400136109679896642813,9400136109679896649348,9400136109679896649409,9400136109679896649706,9400136109679896649881,9400136109679896650030,9400136109679896650634,9400136109679896651051,9400136109679896651129,9400136109679896651402,9400136109679896651563,9400136109679896651594,9400136109679896651761,9400136109679896651877,9400136109679896652287,9400136109679896652478,9400136109679896652508,9400136109679896652652,9400136109679896652799,9400136109679896656599,9400136109679896659224,9400136109679896659309,9400136109679896671332,9400136109679896672094,9400136109679896672186,9400136109679896676610,9400136109679896676856,9400136109679896677471,9400136109679896678171,9400136109679896680860,9400136109679896680945,9400136109679896695192,9400136109679896695901,9400136109679896696366,9400136109679896696380,9400136109679896696861,9400136109679896696830,9400136109679896696823,9400136109679896697325,9400136109679896697875,9400136109679896698445,9400136109679896698841,9400136109679896698865,9400136109679896698896,9400136109679896699329,9400136109679896709165,9400136109679896709240,9400136109679896709950,9400136109679896712653,9400136109679896713100,9400136109679896714510,9400136109679896715197,9400136109679896717696,9400136109679896717719,9400136109679896718174,9400136109679896721068,9400136109679896723192,9400136109679896723390,9400136109679896726100,9400136109679896727664,9400136109679896727695,9400136109679896727763,9400136109679896728005,9400136109679896728036,9400136109679896728197,9400136109679896728326,9400136109679896728395,9400136109679896729484,9400136109679896730145,9400136109679896730527,9400136109679896730503,9400136109679896730596,9400136109679896733139,9400136109679896736116,9400136109679896740403,9400136109679896745569,9400136109679896745811,9400136109679896746399,9400136109679896746436,9400136109679896746511,9400136109679896747440,9400136109679896755308,9400136109679896755803,9400136109679896755810,9400136109679896758989,9400136109679896764874,9400136109679896768889,9400136109679896770967,9400136109679896779847,9400136109679896784766,9400136109679896787118,9400136109679896787408,9400136109679896790194,9400136109679896790422,9400136109679896793010,9400136109679896794833,9400136109679896796288,9400136109679896796486,9400136109679896798466,9400136109679896801074,9400136109679896801104,9400136109679896801449,9400136109679896801456,9400136109679896801470,9400136109679896801814,9400136109679896801821,9400136109679896802330,9400136109679896802620,9400136109679896804952,9400136109679896805003,9400136109679896807786,9400136109679896809070,9400136109679896810847,9400136109679896815088,9400136109679896820631,9400136109679896837233,9400136109679896837646,9400136109679896841452,9400136109679896842633,9400136109679896842664,9400136109679896843746,9400136109679896843845,9400136109679896844637,9400136109679896845207,9400136109679896845894,9400136109679896846150,9400136109679896846129,9400136109679896846723,9400136109679896846785,9400136109679896847409,9400136109679896847522,9400136109679896847577,9400136109679896847850,9400136109679896848208,9400136109679896848185,9400136109679896848307,9400136109679896848949,9400136109679896848956,9400136109679896849014,9400136109679896849694,9400136109679896854407,9400136109679896854414,9400136109679896876256,9400136109679896876379,9400136109679896881076,9400136109679896892942,9400136109679896896018,9400136109679896903181,9400136109679896911087,9400136109679896919144,9400136109679896933744,9400136109679896942135,9400136109679896944047,9400136109679896954008,9400136109679896954657,9400136109679896969453,9400136109679896969507,9400136109679896977106,9400136109679896978240,9400136109679896978974,9400136109679896989796,9400136109679897339781,9400136109679897377134,9400136109679897640115,9400136109679897698598",
                            ScanFormUrl = "https://tscapplive.blob.core.windows.net/scanform/printify/Scanform_skid12_73996_printify_05312023_1105(PM).pdf",
                            CarrierCode = "USPS"
                        },
                        new PrintPalletScanFormDetailModel
                        {
                            PartnerName = "TeePublic",
                            TrackingCodes = "9400136109698896869426,9400136109698897037855,9400136109698896940118,9400136109698897641656",
                            ScanFormUrl = "https://tscapplive.blob.core.windows.net/scanform/teepublicvip/Scanform_skid12_73996_teepublicvip_05312023_1105(PM).pdf",
                            CarrierCode = "DHL"
                        }
                    }
            };
        }

        private static async Task<byte[]?> DownloadFileUrlAsync(string url)
        {
            byte[]? bytesFile;
            if (string.IsNullOrEmpty(url))
            {
                return Array.Empty<byte>();
            }
            try
            {
                using var client = new HttpClient();
                var response = await client.GetAsync(url);
                if (!response.IsSuccessStatusCode)
                {
                    return Array.Empty<byte>();
                }

                bytesFile = response.Content.ReadAsByteArrayAsync().Result;
            }
            catch
            {
                bytesFile = null;
            }

            return bytesFile;
        }

        private static byte[] BindHeaderSummaryScanForm(PrintPalletScanFormModel model)
        {
            #region Define Document
            const int font16 = 16;
            const int font12 = 12;
            const int font10 = 10;

            PdfFont fontNormal = PdfFontFactory.CreateFont(StandardFonts.HELVETICA);

            var stream = new MemoryStream();
            var writer = new PdfWriter(stream);

            var pdfDocument = new PdfDocument(writer);
            pdfDocument.SetDefaultPageSize(PageSize.LETTER);
            var document = new Document(pdfDocument);
            document.SetMargins(0.25f, 50f, 0.25f, 50f);
            #endregion Define Document

            #region Add Header
            var table = new Table(1);
            table.SetWidth(UnitValue.CreatePercentValue(100f))
                .SetFixedLayout();

            #region SCANFORM SUMMARY
            var paragraph = new Paragraph();
            paragraph.Add(new Text("SCANFORM SUMMARY")
                .SetFont(fontNormal)
                .SetFontSize(font16))
                .SetBold()
                .SetTextAlignment(TextAlignment.CENTER)
                ;

            var cell = new Cell(1, 1);
            cell.Add(paragraph)
                .SetPadding(0)
                .SetBorder(Border.NO_BORDER)
                .SetHorizontalAlignment(HorizontalAlignment.CENTER)
                .SetVerticalAlignment(VerticalAlignment.MIDDLE)
                ;
            table.AddCell(cell);
            #endregion SCANFORM SUMMARY

            #region SKID #
            paragraph = new Paragraph();
            paragraph.Add(new Text($"SKID #{model.SkidNumber}: {model.SKidName}")
                .SetFont(fontNormal)
                .SetFontSize(font12))
                .SetBold()
                .SetTextAlignment(TextAlignment.CENTER)
                ;

            cell = new Cell(1, 1);
            cell.Add(paragraph)
                .SetPadding(0)
                .SetBorder(Border.NO_BORDER)
                .SetHorizontalAlignment(HorizontalAlignment.CENTER)
                .SetVerticalAlignment(VerticalAlignment.MIDDLE)
                ;
            table.AddCell(cell);
            #endregion SKID #

            #region PALLET #
            paragraph = new Paragraph();
            paragraph.Add(new Text($"PALLET # {model.PalletId}")
                .SetFont(fontNormal)
                .SetFontSize(font12))
                .SetBold()
                .SetTextAlignment(TextAlignment.CENTER)
                ;

            cell = new Cell(1, 1);
            cell.Add(paragraph)
                .SetPadding(0)
                .SetBorder(Border.NO_BORDER)
                .SetHorizontalAlignment(HorizontalAlignment.CENTER)
                .SetVerticalAlignment(VerticalAlignment.MIDDLE)
                ;
            table.AddCell(cell);
            #endregion PALLET #

            #region Closed by
            paragraph = new Paragraph();
            paragraph.Add(new Text($"Closed by: {model.ClosedBy}")
                .SetFont(fontNormal)
                .SetFontSize(font10))
                .SetTextAlignment(TextAlignment.CENTER)
                ;

            cell = new Cell(1, 1);
            cell.Add(paragraph)
                .SetPadding(0)
                .SetBorder(Border.NO_BORDER)
                .SetHorizontalAlignment(HorizontalAlignment.CENTER)
                .SetVerticalAlignment(VerticalAlignment.MIDDLE)
                ;
            table.AddCell(cell);
            #endregion Closed by

            #region Closed On
            paragraph = new Paragraph();
            paragraph.Add(new Text($"Closed On: {model.ClosedOn}")
                .SetFont(fontNormal)
                .SetFontSize(font10))
                .SetTextAlignment(TextAlignment.CENTER)
                ;

            cell = new Cell(1, 1);
            cell.Add(paragraph)
                .SetPadding(0)
                .SetBorder(Border.NO_BORDER)
                .SetHorizontalAlignment(HorizontalAlignment.CENTER)
                .SetVerticalAlignment(VerticalAlignment.MIDDLE)
                ;
            table.AddCell(cell);
            document.Add(table);
            #endregion Closed by

            #endregion Add Header

            #region Add Details
            table = new Table(2);
            table.SetWidth(UnitValue.CreatePercentValue(100f))
                .SetFixedLayout()
                .SetMarginTop(20);

            foreach (var detail in model.Details)
            {
                var trackingCodes = string.IsNullOrEmpty(detail.TrackingCodes)
                            ? new List<string> { "" }
                            : detail.TrackingCodes.Split(',').ToList();

                #region Partner Name
                paragraph = new Paragraph();
                paragraph.Add(new Text(detail.PartnerName)
                    .SetFont(fontNormal)
                    .SetFontSize(font10))
                    .SetTextAlignment(TextAlignment.CENTER)
                    ;

                cell = new Cell(1, 1);
                cell.Add(paragraph)
                    .SetHorizontalAlignment(HorizontalAlignment.CENTER)
                    .SetVerticalAlignment(VerticalAlignment.MIDDLE)
                    ;
                table.AddCell(cell);
                #endregion Partner Name

                #region Count Tracking Code
                paragraph = new Paragraph();
                paragraph.Add(new Text(trackingCodes.Count.ToString())
                    .SetFont(fontNormal)
                    .SetFontSize(font10))
                    .SetTextAlignment(TextAlignment.CENTER)
                    ;

                cell = new Cell(1, 1);
                cell.Add(paragraph)
                    .SetHorizontalAlignment(HorizontalAlignment.CENTER)
                    .SetVerticalAlignment(VerticalAlignment.MIDDLE)
                    ;
                table.AddCell(cell);
                #endregion Count Tracking Code
            }
            document.Add(table);
            #endregion Add Details

            #region Add End Page
            pdfDocument.AddEventHandler(PdfDocumentEvent.END_PAGE, new PalletScanFormHeaderEventHandler());
            #endregion Add End Page

            document.Close();
            return stream.ToArray();
        }

        public async Task<byte[]> ExportPalletScanFormAsync(PrintPalletScanFormModel model)
        {
            //Header Summary
            var headerBytes = BindHeaderSummaryScanForm(model);
            if(headerBytes.Length == 0)
            {
                return Array.Empty<byte>();
            }

            #region Merge Pdf Scan Form
            var stream = new MemoryStream();
            PdfWriter writer = new PdfWriter(stream);

            PdfDocument pdfCombined = new PdfDocument(writer);
            PdfMerger merger = new PdfMerger(pdfCombined);
            
            //merge header summary
            PdfDocument pdfDocumentHeader = new PdfDocument(new PdfReader(new MemoryStream(headerBytes)));
            merger.Merge(pdfDocumentHeader, 1, pdfDocumentHeader.GetNumberOfPages());

            //merge Scan Form Url.
            foreach (var detail in model.Details)
            {
                var bytes = await DownloadFileUrlAsync(detail.ScanFormUrl);
                if (bytes == null || bytes.Length == 0)
                {
                    continue;
                }

                if (detail.CarrierCode == "USPS")
                {
                    var pdfDocument = new PdfDocument(new PdfReader(new MemoryStream(bytes)));
                    merger.Merge(pdfDocument, 1, pdfDocument.GetNumberOfPages());
                    pdfDocument.Close();
                }
                else //Print 2 copies of each Scan form instead of 1. We will keep 1 copy, and give 1 copy to driver.
                {
                    var pdfDocument = new PdfDocument(new PdfReader(new MemoryStream(bytes)));
                    merger.Merge(pdfDocument, 1, pdfDocument.GetNumberOfPages());
                    merger.Merge(pdfDocument, 1, pdfDocument.GetNumberOfPages());
                    pdfDocument.Close();
                }
            }

            pdfCombined.Close();
            pdfDocumentHeader.Close();
            writer.Close();
            #endregion Merge Pdf Scan Form

            return stream.ToArray();
        }
    }
}
